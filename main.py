from sentence_transformers import SentenceTransformer
import qdrant_client
from qdrant_client.models import PointStruct, VectorParams, Distance
import time

def test_qdrant_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        clients = [
            qdrant_client.QdrantClient("localhost:6333"),
            qdrant_client.QdrantClient(":memory:"),  # In-memory
            qdrant_client.QdrantClient(host="localhost", port=6333),
            qdrant_client.QdrantClient()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost:6333
        ]
        
        for client in clients:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
                collections = client.get_collections()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {client._client.rest_uri}")
                return client
            except Exception as e:
                continue
                
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Qdrant –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:")
        print("   docker run -p 6333:6333 qdrant/qdrant")
        print("   –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Ä–µ–∂–∏–º...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –∫–∞–∫ fallback
        return qdrant_client.QdrantClient(":memory:")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å Qdrant...")
    
    # –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    document = """
    –ö–æ–º–ø–∞–Ω–∏—è '–†–æ–º–∞—à–∫–∞' –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2010 –≥–æ–¥—É. 
    –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç - —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Å—É–º–∫–∏ –∏–∑ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
    –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä - –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤.
    –®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ.
    """

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ (–∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–æ —Å—Ç—Ä–æ—á–Ω–æ)
    chunks = [
        "–ö–æ–º–ø–∞–Ω–∏—è '–†–æ–º–∞—à–∫–∞' –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2010 –≥–æ–¥—É",
        "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç - —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Å—É–º–∫–∏", 
        "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä - –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        "–®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ"
    ]

    print("üìù –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = SentenceTransformer('all-MiniLM-L6-v2')

    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã
    embeddings = model.encode(chunks)
    print(f"‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {embeddings.shape}")  # (4, 384)

    print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Qdrant...")
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Qdrant
    client = test_qdrant_connection()
    if client is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Qdrant –∫–ª–∏–µ–Ω—Ç")
        return

    print("üìÅ –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        client.create_collection(
            collection_name="my_documents",
            vectors_config=VectorParams(size=384, distance=Distance.COSINE)
        )
        print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    points = [
        PointStruct(
            id=idx,
            vector=embedding.tolist(),
            payload={"text": chunk, "chunk_id": idx}
        )
        for idx, (chunk, embedding) in enumerate(zip(chunks, embeddings))
    ]

    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant...")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Qdrant
    client.upsert(collection_name="my_documents", points=points)
    print("‚úÖ –í–µ–∫—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Qdrant!")

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    time.sleep(1)

    # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
    print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫...")
    
    # –í–∞—à –≤–æ–ø—Ä–æ—Å
    question = "–ö—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–∞–Ω–∏–µ–π?"

    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    question_embedding = model.encode([question]).tolist()[0]

    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant
    search_result = client.search(
        collection_name="my_documents",
        query_vector=question_embedding,
        limit=2  # —Ç–æ–ø-2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    )

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: '{question}'")
    print("=" * 50)
    
    if not search_result:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        for i, result in enumerate(search_result, 1):
            print(f"{i}. –¢–µ–∫—Å—Ç: {result.payload['text']}")
            print(f"   –°—Ö–æ–∂–µ—Å—Ç—å: {result.score:.3f}")
            print(f"   ID: {result.id}")
            print("-" * 40)

    print("\n‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
