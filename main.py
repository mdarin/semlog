from sentence_transformers import SentenceTransformer
import qdrant_client
from qdrant_client.models import PointStruct, VectorParams, Distance



# –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
document = """
–ö–æ–º–ø–∞–Ω–∏—è '–†–æ–º–∞—à–∫–∞' –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2010 –≥–æ–¥—É. 
–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç - —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Å—É–º–∫–∏ –∏–∑ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä - –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤.
–®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ.
"""

# –†–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏(–∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–æ —Å—Ç—Ä–æ—á–Ω–æ)
chunks = [
    "–ö–æ–º–ø–∞–Ω–∏—è '–†–æ–º–∞—à–∫–∞' –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2010 –≥–æ–¥—É",
    "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç - —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Å—É–º–∫–∏", 
    "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä - –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
    "–®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ"
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = SentenceTransformer('all-MiniLM-L6-v2')

# –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã
embeddings = model.encode(chunks)
print(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {embeddings.shape}")  # (4, 384)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Qdrant
client = qdrant_client.QdrantClient(":memory:")  # –∏–ª–∏ "localhost:6333"

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
client.create_collection(
    collection_name="my_documents",
    vectors_config=VectorParams(size=384, distance=Distance.COSINE)
)

# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
points = [
    PointStruct(
        id=idx,
        vector=embedding.tolist(),
        payload={"text": chunk, "chunk_id": idx}
    )
    for idx, (chunk, embedding) in enumerate(zip(chunks, embeddings))
]

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Qdrant
client.upsert(collection_name="my_documents", points=points)
print("‚úÖ –í–µ–∫—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Qdrant!")

# –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
# –í–∞—à –≤–æ–ø—Ä–æ—Å
question = "–ö—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–∞–Ω–∏–µ–π?"

# –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
question_embedding = model.encode([question]).tolist()[0]

# –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant
search_result = client.search(
    collection_name="my_documents",
    query_vector=question_embedding,
    limit=2  # —Ç–æ–ø-2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
)

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:")
for result in search_result:
    print(f"–¢–µ–∫—Å—Ç: {result.payload['text']}")
    print(f"–°—Ö–æ–∂–µ—Å—Ç—å: {result.score:.3f}")
    print("---")
